{"version":3,"sources":["api_call/data.js","api_call/handleCommands.js","components/Chart.js","components/RenderChart.js","dictionaries/dictionary.js","components/Logo.js","App.js","serviceWorker.js","index.js","images/cov-logo.png"],"names":["url","fetchCountryData","country","a","fetch","json","data","fetchWorldData","worldData","commands","capitalizeFirstLetter","string","charAt","toUpperCase","slice","handleSingleCountryQuery","annyang","setData","real","Error","result","value","confirmed","type","recovered","deaths","abort","handleWorldQuery","console","log","Chart","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","options","maintainAspectRatio","title","display","text","legend","CountryChart","singleCountryData","conf","rec","props","WorldChart","enToPol","names","Container","styled","div","Img","img","Logo","src","logo","GlobalStyle","createGlobalStyle","Button","button","Typography","p","ChartContainer","App","useState","showListCommands","setShowListCommands","setSingleCountryData","setWorldData","errorMessage","setErrorMessage","voiceCommands","setLanguage","addCommands","dictionary","unknown","handleUnknownCommand","start","className","style","margin","padding","textAlign","fontSize","onClick","map","command","i","key","end","duration","separator","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.98816635.chunk.js","sourcesContent":["const url = `https://covid19.mathdro.id/api`;\r\n\r\nexport const fetchCountryData = async country => {\r\n    try {\r\n        const data = await (await (fetch(`${url}/countries/${country}`))).json()\r\n        return data;\r\n    }\r\n    catch(error) {\r\n        return 'error';\r\n    }\r\n}\r\n\r\nexport const fetchWorldData = async () => {\r\n    try {\r\n        const worldData = await (await (fetch(url))).json();\r\n        return worldData;\r\n    }\r\n    catch(error) {\r\n        return 'error';\r\n    }\r\n}\r\n\r\nexport const commands = [\r\n    '-świat',\r\n    '-kraj <kraj który chcesz wyszukać>'\r\n];\r\n\r\nexport const capitalizeFirstLetter = string => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n","import { fetchCountryData, fetchWorldData } from './data';\r\n\r\nexport const handleSingleCountryQuery = async (country, annyang, setData, real) => {\r\n    try {\r\n        const data = await fetchCountryData(country);\r\n        if(data === 'error') throw new Error('error');\r\n        const result = [\r\n            { value: data.confirmed.value, type: 'potwierdzono' },\r\n            { value: data.recovered.value, type: 'wyzdrowiało' },\r\n            { value: data.deaths.value, type: 'zmarło' }\r\n        ]\r\n        setData({ result, country });\r\n    } catch(error) {\r\n        setData([`Nie odnaleziono kraju: ${real}`]);\r\n    }\r\n    annyang.abort()\r\n}\r\n\r\nexport const handleWorldQuery = async (annyang, setData) => {\r\n    try {\r\n        const data = await fetchWorldData();\r\n        const result = [\r\n            { value: data.confirmed.value, type: 'potwierdzono' },\r\n            { value: data.recovered.value, type: 'wyzdrowiało' },\r\n            { value: data.deaths.value, type: 'zmarło' }\r\n        ];\r\n        setData(result);\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n    annyang.abort();\r\n}\r\n\r\nexport const handleUnknownCommand = (unknown, annyang, setErrorMessage) => {\r\n    setErrorMessage(unknown);\r\n    annyang.abort();\r\n}\r\n","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths, country } }) => {\r\n    const data = {\r\n        labels: ['Potwierdzono', 'Wyzdrowiało', 'Zmarło'],\r\n        datasets: [{     \r\n            backgroundColor: ['rgb(45, 25, 185)', 'rgb(15, 230, 32)', 'rgb(210, 21, 56)'],\r\n            borderColor: ['#0275d8', '#5cb85c', '#d9534f'],\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: ['rgb(43, 23, 182)', 'rgb(12, 227, 29)', 'rgb(207, 18, 53)'],\r\n            hoverBorderColor: 'black',\r\n            data: [confirmed, recovered, deaths],\r\n          }]\r\n      }\r\n      const options = {\r\n        maintainAspectRatio: true,\r\n        title: {\r\n            display: true,\r\n            text: `Wyświetlam dane dla: ${country}`\r\n        },\r\n        legend: {\r\n            display: false\r\n        }\r\n      }\r\n      \r\n    return ( \r\n        <Bar data={data} options={options} />\r\n    )\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport Chart from './Chart';\r\n\r\nexport const CountryChart = ({ data: { singleCountryData: [conf, rec, deaths], country } }) => {\r\n    const props = {\r\n        confirmed: conf.value,\r\n        recovered: rec.value,\r\n        deaths: deaths.value,\r\n        country\r\n    }\r\n    return <Chart data={props} />\r\n}\r\n\r\nexport const WorldChart = ({ data: { worldData } }) => {\r\n    const props = {\r\n        confirmed: worldData[0].value,\r\n        recovered: worldData[1].value, \r\n        deaths: worldData[2].value,\r\n        country: \"świat\"\r\n    }\r\n    return <Chart data={props} />\r\n}\r\n","export default {\r\n   'Afganistan' : 'Afghanistan',\r\n   'Albania' : 'Albania',\r\n   'Algieria' : 'Algeria',\r\n   'Andora' : 'Andorra',\r\n   'Angola' : 'Angola',\r\n   'Antigua i Barbuda' : 'Antigua and Barbuda',\r\n   'Argentyna' : 'Argentina',\r\n   'Armenia' : 'Armenia',\r\n   'Australia' : 'Australia',\r\n   'Austria' : 'Austria',\r\n   'Azerbejdżan' : 'Azerbijan',\r\n   'Bahamy' : 'Bahamas',\r\n   'Bahrajn' : 'Bahrain',\r\n   'Bangladesz' : 'Bangladesh',\r\n   'Barbados' : 'Barbados',\r\n   'Białoruś' : 'Belarus',\r\n   'Belgia' : 'Belgium',\r\n   'Belize' : 'Belize',\r\n   'Benin' : 'Benin',\r\n   'Bhutan' : 'Bhutan',\r\n   'Boliwia' : 'Bolivia',\r\n   'Bośnia i Hercegowina' : 'Bosnia and Herzegovina',\r\n   'Bostwana' : 'Bostwana',\r\n   'Brazylia' : 'Brasil',\r\n   'Brunei' : 'Brunei',\r\n   'Bułgaria' : 'Bulgaria',\r\n   'Burkina Faso' : 'Burkina Faso',\r\n   'Birma' : 'Burma',\r\n   'Burundi' : 'Burundi',\r\n   'Kambodża' : 'Cambodia',\r\n   'Kamerun' : 'Cameroon',\r\n   'Kanada' : 'Canada',\r\n   'Republika Środkowoafrykaoska' : 'Central African Republic',\r\n   'Czad' : 'Chad',\r\n   'Chile' : 'Chile',\r\n   'Chiny' : 'China',\r\n   'Kolumbia' : 'Columbia',\r\n   'Komory' : 'Comoros',\r\n   'Kostaryka' : 'Costa Rica',\r\n   'Chorwacja' : 'Croatia',\r\n   'Kuba' : 'Cuba',\r\n   'Cypr' : 'Cyprus',\r\n   'Czechy' : 'Czech Republic',\r\n   'Demokratyczna Republika Konga' : 'Democratic Republic of Kongo',\r\n   'Dania' : 'Denmark',\r\n   'Dżibuti' : 'Djibouti',\r\n   'Dominika' : 'Dominica',\r\n   'Dominikana' : 'Dominican Republic',\r\n   'Timor Wschodni' : 'East Timor',\r\n   'Egipt' : 'Egypt',\r\n   'Salwador' : 'El Salvador',\r\n   'Ekwador' : 'Equador',\r\n   'Gwinea Równikowa' : 'Equatorial Guinea',\r\n   'Erytrea' : 'Eritrea',\r\n   'Estonia' : 'Estonia',\r\n   'Etiopia' : 'Ethiopia',\r\n   'Fidżi' : 'Fiji',\r\n   'Finlandia' : 'Finland',\r\n   'Francja' : 'France',\r\n   'Gabon' : 'Gabon',\r\n   'Gambia' : 'Gambia',\r\n   'Gruzja' : 'Georgia',\r\n   'Niemcy' : 'Germany',\r\n   'Ghana' : 'Ghana',\r\n   'Wielka Brytania' : 'Great Britain',\r\n   'Grecja' : 'Greece',\r\n   'Grenada' : 'Grenada',\r\n   'Gwatemala' : 'Guatemala',\r\n   'Gujana' : 'Guiana',\r\n   'Gwinea' : 'Guinea',\r\n   'Gwinea Bissau' : 'Guinea-Bissau',\r\n   'Haiti' : 'Haiti',\r\n   'Honduras' : 'Honduras',\r\n   'Węgry' : 'Hungary',\r\n   'Islandia' : 'Iceland',\r\n   'Indie' : 'India',\r\n   'Indonezja' : 'Indonesia',\r\n   'Iran' : 'Iran',\r\n   'Irak' : 'Iraq',\r\n   'Irlandia' : 'Ireland',\r\n   'Izrael' : 'Israel',\r\n   'Włochy' : 'Italy',\r\n   'Jamajka' : 'Jamaica',\r\n   'Japonia' : 'Japan',\r\n   'Jordania' : 'Jordan',\r\n   'Kazachstan' : 'Kazakhstan',\r\n   'Kenia' : 'Kenia',\r\n   'Kiribati' : 'Kiribati',\r\n   'Kongo' : 'Kongo',\r\n   'Kuwejt' : 'Kuwait',\r\n   'Kirgistan' : 'Kyrgyzstan',\r\n   'Laos' : 'Laos',\r\n   'Litwa' : 'Latvia',\r\n   'Liban' : 'Lebanon',\r\n   'Lesotho' : 'Lesotho',\r\n   'Libia' : 'Libya',\r\n   'Liechtenstein' : 'Liechtenstein',\r\n   'Liberia' : 'Livery',\r\n   'Luksemburg' : 'Luxembourg',\r\n   'Macedonia' : 'Macedonia',\r\n   'Madagaskar' : 'Madagascar',\r\n   'Malawi' : 'Malawi',\r\n   'Malediwy' : 'Maledives',\r\n   'Mali' : 'Mali',\r\n   'Malta' : 'Malta',\r\n   'Malezja' : 'Malysia',\r\n   'Wyspy Marshalla' : 'Marshall Islands',\r\n   'Mauretania' : 'Mauretania',\r\n   'Mauritius' : 'Mauritius',\r\n   'Meksyk' : 'Mexico',\r\n   'Mikronezja' : 'Micronesia',\r\n   'Mołdawia' : 'Moldova',\r\n   'Monako' : 'Monaco',\r\n   'Mongolia' : 'Mongolia',\r\n   'Czarnogóra' : 'Montenegro',\r\n   'Maroko' : 'Morocco',\r\n   'Mozambik' : 'Mosambique',\r\n   'Namibia' : 'Namibia',\r\n   'Nauru' : 'Nauru',\r\n   'Nepal' : 'Nepal',\r\n   'Holandia' : 'Netherlands',\r\n   'Nowa Zelandia' : 'New Zealand',\r\n   'Nikaragua' : 'Nicaragua',\r\n   'Niger' : 'Niger',\r\n   'Nigeria' : 'Nigeria',\r\n   'Korea Północna' : 'North Korea',\r\n   'Norwegia' : 'Norway',\r\n   'Oman' : 'Oman',\r\n   'Pakistan' : 'Pakistan',\r\n   'Palau' : 'Palau',\r\n   'Panama' : 'Panama',\r\n   'Papua Nowa Gwinea' : 'Papua New Guinea',\r\n   'Paragwaj' : 'Paraguay',\r\n   'Peru' : 'Peru',\r\n   'Filipiny' : 'Philipines',\r\n   'Polska' : 'Poland',\r\n   'Portugalia' : 'Portugal',\r\n   'Katar' : 'Qatar',\r\n   'Rumunia' : 'Romania',\r\n   'Rosja' : 'Russia',\r\n   'Rwanda' : 'Rwanda',\r\n   'Saint Kitts Nevis' : 'Saint Kitts and Nevis',\r\n   'Saint Lucia' : 'Saint Lucia',\r\n   'Wyspy Salomona' : 'Salomon Islands',\r\n   'Samoa' : 'Samoa',\r\n   'San Marino' : 'San Marino',\r\n   'Wyspy Świętego Tomasza i Książęca' : 'Sao Tome and Moon',\r\n   'Arabia Saudyjska' : 'Saudi Arabia',\r\n   'Senegal' : 'Senegal',\r\n   'Serbia' : 'Serbia',\r\n   'Seszele' : 'Seychelles',\r\n   'Sierra Leone' : 'Sierra Leone',\r\n   'Singapur' : 'Singapore',\r\n   'Słowacja' : 'Slovakia',\r\n   'Słowenia' : 'Slovenia',\r\n   'Somalia' : 'Somalia',\r\n   'Republika Południowej Afryki' : 'South Africa',\r\n   'Korea Południowa' : 'South Korea',\r\n   'Hiszpania' : 'Spain',\r\n   'Sri Lanka' : 'Sri Lanka',\r\n   'Sudan' : 'Sudan',\r\n   'Surinam' : 'Suriname',\r\n   'Suazi' : 'Swaziland',\r\n   'Szwecja' : 'Sweden',\r\n   'Szwajcaria' : 'Switzerland',\r\n   'Syria' : 'Syria',\r\n   'Tadżykistan' : 'Tajikistan',\r\n   'Tanzania' : 'Tanzania',\r\n   'Tajlandia' : 'Thailand',\r\n   'Togo' : 'Togo',\r\n   'Tonga' : 'Tonga',\r\n   'Trynidad i Tobago' : 'Trinidad and Tobago',\r\n   'Tunezja' : 'Tunisia',\r\n   'Turcja' : 'Turkey',\r\n   'Turkmenistan' : 'Turkmenistan',\r\n   'Tuvalu' : 'Tuvalu',\r\n   'Uganda' : 'Uganda',\r\n   'Ukraina' : 'Ukraine',\r\n   'Zjednoczone Emiraty Arabskie' : 'UAE',\r\n   'Stany Zjednoczone' : 'USA',\r\n   'Urugwaj' : 'Uruguay',\r\n   'Uzbekistan' : 'Uzbekistan',\r\n   'Vanuatu' : 'Vanuatu',\r\n   'Watykan' : 'Vatican',\r\n   'Wenezuela' : 'Venezuela',\r\n   'Wietnam' : 'Vietnam',\r\n   'Jemen' : 'Yemen',\r\n   'Zambia' : 'Zambia',\r\n   'Zimbabwe' : 'Zimbabwe'\r\n}\r\n\r\nexport const enToPol = {\r\n    'Afghanistan' : 'Afganistan',\r\n    'Albania' : 'Albania',\r\n    'Algeria' : 'Algieria',\r\n    'Andorra' : 'Andora',\r\n    'Angola' : 'Angola',\r\n    'Antigua and Barbuda' : 'Antigua i Barbuda',\r\n    'Argentina' : 'Argentyna',\r\n    'Armenia' : 'Armenia',\r\n    'Australia' : 'Australia',\r\n    'Austria' : 'Austria',\r\n    'Azerbijan' : 'Azerbejdżan',\r\n    'Bahamas' : 'Bahamy',\r\n    'Bahrain' : 'Bahrajn',\r\n    'Bangladesh' : 'Bangladesz',\r\n    'Barbados' : 'Barbados',\r\n    'Belarus' : 'Białoruś',\r\n    'Belgium' : 'Belgia',\r\n    'Belize' : 'Belize',\r\n    'Benin' : 'Benin',\r\n    'Bhutan' : 'Bhutan',\r\n    'Bolivia' : 'Boliwia',\r\n    'Bosnia and Herzegovina' : 'Bośnia i Hercegowina',\r\n    'Bostwana' : 'Bostwana',\r\n    'Brasil' : 'Brazylia',\r\n    'Brunei' : 'Brunei',\r\n    'Bulgaria' : 'Bułgaria',\r\n    'Burkina Faso' : 'Burkina Faso',\r\n    'Burma' : 'Birma',\r\n    'Burundi' : 'Burundi',\r\n    'Cambodia' : 'Kambodża',\r\n    'Cameroon' : 'Kamerun',\r\n    'Canada' : 'Kanada',\r\n    'Central African Republic' : 'Republika Środkowoafrykaoska',\r\n    'Chad' : 'Czad',\r\n    'Chile' : 'Chile',\r\n    'China' : 'Chiny',\r\n    'Columbia' : 'Kolumbia',\r\n    'Comoros' : 'Komory',\r\n    'Costa Rica' : 'Kostaryka',\r\n    'Croatia' : 'Chorwacja',\r\n    'Cuba' : 'Kuba',\r\n    'Cyprus' : 'Cypr',\r\n    'Czech Republic' : 'Czechy',\r\n    'Democratic Republic of Kongo' : 'Demokratyczna Republika Konga',\r\n    'Denmark' : 'Dania',\r\n    'Djibouti' : 'Dżibuti',\r\n    'Dominica' : 'Dominika',\r\n    'Dominican Republic' : 'Dominikana',\r\n    'East Timor' : 'Timor Wschodni',\r\n    'Egypt' : 'Egipt',\r\n    'El Salvador' : 'Salwador',\r\n    'Equador' : 'Ekwador',\r\n    'Equatorial Guinea' : 'Gwinea Równikowa',\r\n    'Eritrea' : 'Erytrea',\r\n    'Estonia' : 'Estonia',\r\n    'Ethiopia' : 'Etiopia',\r\n    'Fiji' : 'Fidżi',\r\n    'Finland' : 'Finlandia',\r\n    'France' : 'Francja',\r\n    'Gabon' : 'Gabon',\r\n    'Gambia' : 'Gambia',\r\n    'Georgia' : 'Gruzja',\r\n    'Germany' : 'Niemcy',\r\n    'Ghana' : 'Ghana',\r\n    'Great Britain' : 'Wielka Brytania',\r\n    'Greece' : 'Grecja',\r\n    'Grenada' : 'Grenada',\r\n    'Guatemala' : 'Gwatemala',\r\n    'Guiana' : 'Gujana',\r\n    'Guinea' : 'Gwinea',\r\n    'Guinea-Bissau' : 'Gwinea Bissau',\r\n    'Haiti' : 'Haiti',\r\n    'Honduras' : 'Honduras',\r\n    'Hungary' : 'Węgry',\r\n    'Iceland' : 'Islandia',\r\n    'India' : 'Indie',\r\n    'Indonesia' : 'Indonezja',\r\n    'Iran' : 'Iran',\r\n    'Iraq' : 'Irak',\r\n    'Ireland' : 'Irlandia',\r\n    'Israel' : 'Izrael',\r\n    'Italy' : 'Włochy',\r\n    'Jamaica' : 'Jamajka',\r\n    'Japan' : 'Japonia',\r\n    'Jordan' : 'Jordania',\r\n    'Kazakhstan' : 'Kazachstan',\r\n    'Kenia' : 'Kenia',\r\n    'Kiribati' : 'Kiribati',\r\n    'Kongo' : 'Kongo',\r\n    'Kuwait' : 'Kuwejt',\r\n    'Kyrgyzstan' : 'Kirgistan',\r\n    'Laos' : 'Laos',\r\n    'Latvia' : 'Litwa',\r\n    'Lebanon' : 'Liban',\r\n    'Lesotho' : 'Lesotho',\r\n    'Libya' : 'Libia',\r\n    'Liechtenstein' : 'Liechtenstein',\r\n    'Livery' : 'Liberia',\r\n    'Luxembourg' : 'Luksemburg',\r\n    'Macedonia' : 'Macedonia',\r\n    'Madagascar' : 'Madagaskar',\r\n    'Malawi' : 'Malawi',\r\n    'Maledives' : 'Malediwy',\r\n    'Mali' : 'Mali',\r\n    'Malta' : 'Malta',\r\n    'Malysia' : 'Malezja',\r\n    'Marshall Islands' : 'Wyspy Marshalla',\r\n    'Mauretania' : 'Mauretania',\r\n    'Mauritius' : 'Mauritius',\r\n    'Mexico' : 'Meksyk',\r\n    'Micronesia' : 'Mikronezja',\r\n    'Moldova' : 'Mołdawia',\r\n    'Monaco' : 'Monako',\r\n    'Mongolia' : 'Mongolia',\r\n    'Montenegro' : 'Czarnogóra',\r\n    'Morocco' : 'Maroko',\r\n    'Mosambique' : 'Mozambik',\r\n    'Namibia' : 'Namibia',\r\n    'Nauru' : 'Nauru',\r\n    'Nepal' : 'Nepal',\r\n    'Netherlands' : 'Holandia',\r\n    'New Zealand' : 'Nowa Zelandia',\r\n    'Nicaragua' : 'Nikaragua',\r\n    'Niger' : 'Niger',\r\n    'Nigeria' : 'Nigeria',\r\n    'North Korea' : 'Korea Północna',\r\n    'Norway' : 'Norwegia',\r\n    'Oman' : 'Oman',\r\n    'Pakistan' : 'Pakistan',\r\n    'Palau' : 'Palau',\r\n    'Panama' : 'Panama',\r\n    'Papua New Guinea' : 'Papua Nowa Gwinea',\r\n    'Paraguay' : 'Paragwaj',\r\n    'Peru' : 'Peru',\r\n    'Philipines' : 'Filipiny',\r\n    'Poland' : 'Polska',\r\n    'Portugal' : 'Portugalia',\r\n    'Qatar' : 'Katar',\r\n    'Romania' : 'Rumunia',\r\n    'Russia' : 'Rosja',\r\n    'Rwanda' : 'Rwanda',\r\n    'Saint Kitts and Nevis' : 'Saint Kitts Nevis',\r\n    'Saint Lucia' : 'Saint Lucia',\r\n    'Salomon Islands' : 'Wyspy Salomona',\r\n    'Samoa' : 'Samoa',\r\n    'San Marino' : 'San Marino',\r\n    'Sao Tome and Moon' : 'Wyspy Świętego Tomasza i Książęca',\r\n    'Saudi Arabia' : 'Arabia Saudyjska',\r\n    'Senegal' : 'Senegal',\r\n    'Serbia' : 'Serbia',\r\n    'Seychelles' : 'Seszele',\r\n    'Sierra Leone' : 'Sierra Leone',\r\n    'Singapore' : 'Singapur',\r\n    'Slovakia' : 'Słowacja',\r\n    'Slovenia' : 'Słowenia',\r\n    'Somalia' : 'Somalia',\r\n    'South Africa' : 'Republika Południowej Afryki',\r\n    'South Korea' : 'Korea Południowa',\r\n    'Spain' : 'Hiszpania',\r\n    'Sri Lanka' : 'Sri Lanka',\r\n    'Sudan' : 'Sudan',\r\n    'Suriname' : 'Surinam',\r\n    'Swaziland' : 'Suazi',\r\n    'Sweden' : 'Szwecja',\r\n    'Switzerland' : 'Szwajcaria',\r\n    'Syria' : 'Syria',\r\n    'Tajikistan' : 'Tadżykistan',\r\n    'Tanzania' : 'Tanzania',\r\n    'Thailand' : 'Tajlandia',\r\n    'Togo' : 'Togo',\r\n    'Tonga' : 'Tonga',\r\n    'Trinidad and Tobago' : 'Trynidad i Tobago',\r\n    'Tunisia' : 'Tunezja',\r\n    'Turkey' : 'Turcja',\r\n    'Turkmenistan' : 'Turkmenistan',\r\n    'Tuvalu' : 'Tuvalu',\r\n    'Uganda' : 'Uganda',\r\n    'Ukraine' : 'Ukraina',\r\n    'UAE' : 'Zjednoczone Emiraty Arabskie',\r\n    'USA' : 'Stany Zjednoczone',\r\n    'Uruguay' : 'Urugwaj',\r\n    'Uzbekistan' : 'Uzbekistan',\r\n    'Vanuatu' : 'Vanuatu',\r\n    'Vatican' : 'Watykan',\r\n    'Venezuela' : 'Wenezuela',\r\n    'Vietnam' : 'Wietnam',\r\n    'Yemen' : 'Jemen',\r\n    'Zambia' : 'Zambia',\r\n    'Zimbabwe' : 'Zimbabwe'\r\n}\r\n\r\nexport const names = {\r\n    'potwierdzono' : 'confirmed',\r\n    'wyzdrowiało' : 'recovered',\r\n    'zmarło' : 'deaths'\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport logo from '../images/cov-logo.png';\r\n\r\nconst Container = styled.div`\r\n    text-align: center;\r\n    display: inline-block;\r\n`\r\n\r\nconst Img = styled.img`\r\n    max-width: 25px;\r\n    max-height: 25px;\r\n`\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <Container>\r\n            <Img src={logo} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Logo;","import React, { useState } from 'react';\nimport annyang from 'annyang';\nimport CountUp from 'react-countup';  \nimport styled, { createGlobalStyle } from 'styled-components';\nimport { commands, capitalizeFirstLetter } from './api_call/data';\nimport { handleSingleCountryQuery, handleWorldQuery, handleUnknownCommand } from './api_call/handleCommands';\nimport { CountryChart, WorldChart } from './components/RenderChart';\nimport dictionary, { names, enToPol } from './dictionaries/dictionary';\nimport Logo from './components/Logo';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    background-color: #effffe;\n    font-family: 'Montserrat', sans-serif;\n  }\n  *::before, *::after {\n    box-sizing: border-box;\n  }\n`\n\nconst Button = styled.button`\n  display: block;\n  padding: 20px; \n  outline: none;\n  margin: 10px;\n  border: none;\n  color: white;\n  font-size: 16px;\n  background-color: #5ac2fe;\n  margin-left: auto;\n  margin-right: auto;\n  width: 240px;\n  transition: all .3s ease;\n  &:hover {\n    transform: scale(1.1);\n    background-color: #49b1ed;\n    cursor: pointer;\n  }\n`;\n\nconst Typography = styled.p`\n  @media(max-width: 768px) {\n    font-size: 14px;\n  }\n  text-align: center;\n  font-size: ${({ type }) => !type ? '16px' : '22px'};\n  color: ${({ type }) => type === 'confirmed' ? 'rgb(45, 25, 185)' : type === 'recovered' ? 'rgb(15, 230, 32)' : (type === 'deaths' || type === 'error') ? 'rgb(210, 21, 56)' : 'black'};\n`; \n\nconst ChartContainer = styled.div`\n  @media(max-width: 768px) {\n    max-width: 100%;\n    max-height: 100%;\n    margin: 10px;\n  }\n  @media(min-width: 1000px) {\n    max-width: 60%;\n    max-height: 35%;  \n  }\n  max-width: 50%;\n  max-height: 50%;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nfunction App() {\n  const [showListCommands, setShowListCommands] = useState(false);\n  const [singleCountryData, setSingleCountryData] = useState(null);\n  const [worldData, setWorldData] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const setStates = () => {\n    setSingleCountryData(null);\n    setWorldData(null);\n    setErrorMessage('');\n  }\n\n  const voiceCommands = () => {\n    setStates();\n    if(annyang) {\n      annyang.setLanguage('pl');\n      annyang.addCommands({\n        'świat': async () => handleWorldQuery(annyang, setWorldData),\n        'kraj *country': async country => handleSingleCountryQuery(dictionary[country], annyang, setSingleCountryData, country),\n        '*unknown': unknown => handleUnknownCommand(unknown, annyang, setErrorMessage),\n      }); \n      annyang.start();\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <p style={{margin: 0, padding: 0, textAlign: 'center'}}>\n        <p style={{fontSize: '34px', display:'inline-block'}}>C</p><Logo /><p style={{fontSize: '34px', display:'inline-block'}}>VID-19</p>\n      </p>\n      <Button onClick={() => setShowListCommands(!showListCommands)}>Pokaż / Schowaj komendy</Button>\n      { showListCommands && ( \n        commands.map((command, i) => (\n          <Typography key={i}>{command}</Typography>\n        ))\n      ) }\n      <Button onClick={() => voiceCommands()}>Zacznij mówić</Button>\n      { worldData && (\n          worldData.map(({ value, type }, i) => (\n            <Typography key={i} type={names[type]}>{capitalizeFirstLetter(type)} na świecie: {<CountUp end={value} duration={3} separator={' '} />}</Typography> \n          ))\n      ) }\n      {\n        (singleCountryData && singleCountryData.length !== 1) && (\n          singleCountryData.result.map(({ value, type }, i) => (\n            <Typography key={i} type={names[type]}>{capitalizeFirstLetter(type)} w {enToPol[capitalizeFirstLetter(singleCountryData.country)]}: {<CountUp end={value} duration={3} separator={' '} />}</Typography>\n          ))\n        )\n      } \n      {\n        (singleCountryData !== null && singleCountryData.length === 1) && (\n          <Typography type=\"error\">{singleCountryData[0]}</Typography>\n        )\n      }\n      {\n        errorMessage && (\n          <Typography type=\"error\">Nieznana komenda: {errorMessage}</Typography>\n        )\n      }\n      <ChartContainer>\n        { (singleCountryData && singleCountryData.result && singleCountryData.result.length === 3 ) ?\n            <CountryChart data={{ singleCountryData: singleCountryData.result, country: enToPol[singleCountryData.country] }} /> \n            : (worldData && worldData.length === 3) ?  \n            <WorldChart data={{worldData}} /> : <div></div>\n        }\n      </ChartContainer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cov-logo.e578d687.png\";"],"sourceRoot":""}